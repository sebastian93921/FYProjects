/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fyplayer;

import java.awt.Point;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import mswmusickernel.MSWMusicKernel;

/**
 *
 * @author Sebastian Ko
 */
public class PlayerSetting extends MSWMusicKernel {
    private static boolean startingFromToolBar = false;
    private Point cursor                   = null;
    
    private static final int CLOSE_30MIN   = 30;
    private static final int CLOSE_5MIN    = 5;
    private static final int CLOSE_15MIN   = 15;
    private static final int CLOSE_OFF     = -1;
    private static int closeOption            = CLOSE_OFF;

    /**
     * Creates new form PlayerSetting
     */
    public PlayerSetting() {
        initComponents();
        
        TitleSetting.setText("<html><div style=\"white-space: nowrap;\"><b><font size=\"5\" color=\"#FFFFFF\">Settings</font></b></div><hr width=300 size=1 Noshade align=left ></html>");
        
        //Read Config file
        readConfig();
        
        /*****************************************/
        /*
         * Button Setting
         */
        if(startingFromToolBar){
            this.btnStartingFromToolBar.setText("Yes");
        }else
            this.btnStartingFromToolBar.setText("No");
        
        if(super.getUserName() != null && onlineMode){
            this.btnLoginUser.setText(super.getUserName());
        }else
            this.btnLoginUser.setText("No Login");
        
        if(closeOption != -1){
            this.btnShtdwn.setText(closeOption + " Mins");
            lblCountdown.setText(closeTime+" Sec remaining");
        }
        new Thread(new Runnable(){public void run(){
            while(true){
                if(closeTime > 0){
                    lblCountdown.setText(closeTime/2/60+":"+closeTime/2%60+" Min remaining");
                
                }else
                    lblCountdown.setText("");
                try{Thread.sleep(500);}catch(Exception e){}
            }
        }}).start();
        /****************************************/
        

        this.setVisible(true);
    }
    
    
    private static void readConfig(){
        try{
            BufferedReader in = new BufferedReader(new FileReader(userDataPath+"Settings.conf"));
            String tempRead = "";
            if(in.readLine().equals(":MPS")){
                while((tempRead = in.readLine()) != null){
                    if(!tempRead.startsWith("//")){
                        //Start from tool bar
                        if(tempRead.startsWith("::StartFromToolBar = ") && tempRead.endsWith(";")){
                            if(tempRead.endsWith("false;"))startingFromToolBar = false;
                            else if(tempRead.endsWith("true;"))startingFromToolBar = true;
                        }
                    }
                }
            }
            in.close();
        }catch(Exception e){e.printStackTrace();}
    }

    private static void printSetting(){
        try{
            PrintWriter ps = new PrintWriter(new FileWriter(userDataPath+"Settings.conf",false));
            ps.println(":MPS");  //MPS - Music player settings header
            ps.println("//Music Player Settings");
            ps.println("::StartFromToolBar = "+startingFromToolBar+";");
            ps.println("//Network Setting");
            ps.println("::OnlineMode = "+onlineMode+";");
            ps.println("::ServerIP = "+CentralServerIP+";");
            ps.println("//Global Setting");
            ps.println("::user.dir = "+System.getProperty("user.dir")+";");
            ps.close();
            System.out.println("Reprint settings file");
        }catch(Exception ex){
            System.err.println("Reprint settings file fail");
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblStartingFromToolBar = new javax.swing.JLabel();
        btnStartingFromToolBar = new javax.swing.JButton();
        TitleSetting = new javax.swing.JLabel();
        lblLoginAs = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        btnLoginUser = new javax.swing.JButton();
        lblTime = new javax.swing.JLabel();
        btnShtdwn = new javax.swing.JButton();
        lblCountdown = new javax.swing.JLabel();
        settingBg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 153, 153));
        setFocusableWindowState(false);
        setResizable(false);
        setUndecorated(true);
        getContentPane().setLayout(null);

        lblStartingFromToolBar.setText("Start from ToolBar");
        getContentPane().add(lblStartingFromToolBar);
        lblStartingFromToolBar.setBounds(10, 60, 120, 20);

        btnStartingFromToolBar.setText("ON");
        btnStartingFromToolBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartingFromToolBarActionPerformed(evt);
            }
        });
        getContentPane().add(btnStartingFromToolBar);
        btnStartingFromToolBar.setBounds(130, 60, 100, 23);
        getContentPane().add(TitleSetting);
        TitleSetting.setBounds(0, 0, 370, 26);

        lblLoginAs.setText("Connecting User - ");
        getContentPane().add(lblLoginAs);
        lblLoginAs.setBounds(10, 100, 120, 20);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/defaultSkins/close.png"))); // NOI18N
        btnClose.setBorderPainted(false);
        btnClose.setContentAreaFilled(false);
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose);
        btnClose.setBounds(380, 0, 20, 20);

        btnLoginUser.setText("No Login");
        btnLoginUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginUserActionPerformed(evt);
            }
        });
        getContentPane().add(btnLoginUser);
        btnLoginUser.setBounds(130, 100, 100, 23);

        lblTime.setText("Time to close");
        getContentPane().add(lblTime);
        lblTime.setBounds(10, 140, 110, 14);

        btnShtdwn.setText("OFF");
        btnShtdwn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShtdwnActionPerformed(evt);
            }
        });
        getContentPane().add(btnShtdwn);
        btnShtdwn.setBounds(130, 135, 100, 23);
        getContentPane().add(lblCountdown);
        lblCountdown.setBounds(10, 270, 230, 20);

        settingBg.setBackground(new java.awt.Color(255, 0, 140));
        settingBg.setOpaque(true);
        settingBg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                settingBgMousePressed(evt);
            }
        });
        settingBg.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                settingBgMouseDragged(evt);
            }
        });
        getContentPane().add(settingBg);
        settingBg.setBounds(0, 0, 400, 300);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-400)/2, (screenSize.height-300)/2, 400, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartingFromToolBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartingFromToolBarActionPerformed
        // TODO add your handling code here:
        if(btnStartingFromToolBar.getText().equals("Yes")){
            startingFromToolBar = false;
            btnStartingFromToolBar.setText("No");
        }else{
            startingFromToolBar = true;
            btnStartingFromToolBar.setText("Yes");
        }
        
        printSetting();
    }//GEN-LAST:event_btnStartingFromToolBarActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void settingBgMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingBgMousePressed
        // TODO add your handling code here:
        cursor = evt.getPoint();
    }//GEN-LAST:event_settingBgMousePressed

    private void settingBgMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingBgMouseDragged
        // TODO add your handling code here:
        this.setLocation(this.getX()+(int)(evt.getX()-cursor.getX()),this.getY()+(int)(evt.getY()-cursor.getY()));
    }//GEN-LAST:event_settingBgMouseDragged

    private void btnLoginUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginUserActionPerformed
        // TODO add your handling code here:
        if(!btnLoginUser.getText().equals("No Login")){
            super.resetUser();
            onlineMode = false;
            
            btnLoginUser.setText("No Login");
        }
    }//GEN-LAST:event_btnLoginUserActionPerformed

    private void btnShtdwnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShtdwnActionPerformed
        // TODO add your handling code here:
        if(closeOption == PlayerSetting.CLOSE_OFF){
            closeTime     = PlayerSetting.CLOSE_5MIN*60*2;
            closeOption    = PlayerSetting.CLOSE_5MIN;
            btnShtdwn.setText("5 Mins");
        }else if(closeOption == PlayerSetting.CLOSE_5MIN){
            closeTime     = PlayerSetting.CLOSE_15MIN*60*2;
            closeOption    = PlayerSetting.CLOSE_15MIN;
            btnShtdwn.setText("15 Mins");
        }else if(closeOption == PlayerSetting.CLOSE_15MIN){
            closeTime     = PlayerSetting.CLOSE_30MIN*60*2;
            closeOption    = PlayerSetting.CLOSE_30MIN;
            btnShtdwn.setText("30 Mins");
        }else{
            closeTime     = -1;
            closeOption    = PlayerSetting.CLOSE_OFF;
            btnShtdwn.setText("OFF");
        }
        
        new Thread(new Runnable(){public void run(){
            if(closeOption != -1){
                int lockOption = closeOption;
                for(; closeTime > 0 ; closeTime--){
                    if(lockOption != closeOption)break;
                    try{Thread.sleep(500);}catch(Exception e){}
                }
                System.out.println("Timer DONE");
                lblCountdown.setText("");
                if(lockOption == closeOption)System.exit(0);
            }
        }}).start();
    }//GEN-LAST:event_btnShtdwnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TitleSetting;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnLoginUser;
    private javax.swing.JButton btnShtdwn;
    private javax.swing.JButton btnStartingFromToolBar;
    private javax.swing.JLabel lblCountdown;
    private javax.swing.JLabel lblLoginAs;
    private javax.swing.JLabel lblStartingFromToolBar;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel settingBg;
    // End of variables declaration//GEN-END:variables
}
