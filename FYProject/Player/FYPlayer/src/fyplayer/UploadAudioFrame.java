/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UploadAudioFrame.java
 *
 * Created on 2013年3月25日, 下午04:00:58
 */
package fyplayer;

import ClientNet.Client;
import ClientNet.ConnectionFailException;
import com.sun.awt.AWTUtilities;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicProgressBarUI;
import javax.swing.table.DefaultTableModel;
import net.AudioDetails;
import net.AudioElement;
import tag.codec.AudioIDInvalidException;
import tag.codec.AudioTAG;

/**
 *
 * @author Ivan
 */
public class UploadAudioFrame extends javax.swing.JFrame {
    private Point cursor                    = null;
    
    Client connection;
    LinkedList<AudioElement> AudioList;
    LinkedList<AudioDetails> UploadList;
    AudioSelectModel SelectOption = new AudioSelectModel();
    
    private final int WIDTH         = Toolkit.getDefaultToolkit().getScreenSize().width;
    private final int HEIGHT        = Toolkit.getDefaultToolkit().getScreenSize().height;
    
    private static final ImageIcon detailsCover                = new ImageIcon(FYPlayer.class.getResource("/defaultSkins/default-cover.png"));
    
    private static int processNum    = 0;
    private static boolean uploadClosed = false;
    
    

    /** Creates new form UploadAudioFrame */
    public UploadAudioFrame(Client connection,LinkedList<AudioElement> AudioList) {
        initComponents();
        uploadClosed       = false;
        this.connection = connection;
        this.AudioList  = AudioList;
        
        /*******************************************************************/
        /*******UI Setting********/
        this.AudioUploadPanel.setVisible(false);
        this.Cover.setIcon(detailsCover);
        
        this.UploadProcessBar.setUI(new UploadingProgressBarUI());
        this.UploadProcessBar.setForeground(new Color(255,0,90));
        this.UploadProcessBar.setBackground(new Color(255,255,255));
        /*******************************************************************/
        
        /*/SE 1.7
        this.setOpacity(0.9f);
        this.setBackground(new Color(255, 255, 255, 0));
        /**/
        
        //SE 1.6 u 10
        AWTUtilities.setWindowOpaque(this, false);
        /**/
        
        try {
            UploadList = connection.receiveUploadList();
        } catch (ConnectionFailException ex) {
            System.err.println("Connections Fail");
        }
        
        
        this.AudioSelectTable         = new JTable();
        this.AudioSelectTable.setModel(SelectOption);
        this.AudioSelectTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        for(int i = 0 ; i < AudioList.size() ; i++){
            if(AudioList.get(i).getType() == 'O' && new File(AudioList.get(i).getPath()).exists()){
                try {
                    AudioTAG tag = new AudioTAG(AudioList.get(i).getPath());
                    boolean check = false;
                    
                    for(int j = 0 ; j < UploadList.size() ; j++){
                        System.out.println(">"+UploadList.get(j).getTagTitle()+"----"+tag.getTagTitle()+"//////"+UploadList.get(j).getTagArtist()+"------"+tag.getTagArtist());
                        if(UploadList.get(j).getTagTitle().equals(tag.getTagTitle()) && UploadList.get(j).getTagArtist().equals(tag.getTagArtist()))check = true;
                    }
                    if(!check)SelectOption.addRow(new Object[]{false,tag.getTagTitle(),tag.getTagArtist(),tag.getTagAlbum(),AudioList.get(i).getPath()});
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
        
        ButtonGroup permBg = new ButtonGroup();
        permBg.add(publicRadio);
        permBg.add(privateRadio);
        
        uploadConMsg.setText("");
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        AudioUploadPanel = new javax.swing.JPanel();
        UploadProcessBar = new javax.swing.JProgressBar();
        UploadProcessText = new javax.swing.JLabel();
        ProcessStatus = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        UploadPanelBg = new javax.swing.JLabel();
        MainContentPanel = new javax.swing.JPanel();
        AudioSelectPanel = new javax.swing.JPanel();
        Cover = new javax.swing.JLabel();
        UploadAudioScrollPanel = new javax.swing.JScrollPane();
        AudioSelectTable = new javax.swing.JTable();
        btnUploadSelectedList = new javax.swing.JButton();
        btnSelectAll = new javax.swing.JButton();
        btnUnSelectAll = new javax.swing.JButton();
        btnFormClose = new javax.swing.JButton();
        publicRadio = new javax.swing.JRadioButton();
        privateRadio = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        uploadConMsg = new javax.swing.JLabel();
        MainBackGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setFocusableWindowState(false);
        setResizable(false);
        setUndecorated(true);

        MainPanel.setOpaque(false);
        MainPanel.setLayout(null);

        AudioUploadPanel.setOpaque(false);
        AudioUploadPanel.setLayout(null);
        AudioUploadPanel.add(UploadProcessBar);
        UploadProcessBar.setBounds(10, 32, 300, 10);

        UploadProcessText.setForeground(new java.awt.Color(255, 255, 255));
        AudioUploadPanel.add(UploadProcessText);
        UploadProcessText.setBounds(71, 0, 219, 26);

        ProcessStatus.setForeground(new java.awt.Color(255, 255, 255));
        AudioUploadPanel.add(ProcessStatus);
        ProcessStatus.setBounds(10, 0, 55, 26);

        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/defaultSkins/close.png"))); // NOI18N
        btnClose.setBorder(null);
        btnClose.setBorderPainted(false);
        btnClose.setContentAreaFilled(false);
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        AudioUploadPanel.add(btnClose);
        btnClose.setBounds(294, 0, 26, 26);

        UploadPanelBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/defaultSkins/uploadingBg.png"))); // NOI18N
        AudioUploadPanel.add(UploadPanelBg);
        UploadPanelBg.setBounds(0, 0, 320, 50);

        MainPanel.add(AudioUploadPanel);
        AudioUploadPanel.setBounds(0, 0, 320, 50);

        MainContentPanel.setOpaque(false);
        MainContentPanel.setLayout(null);

        AudioSelectPanel.setOpaque(false);
        AudioSelectPanel.setLayout(null);
        AudioSelectPanel.add(Cover);
        Cover.setBounds(440, 50, 128, 128);

        AudioSelectTable.setModel(SelectOption);
        AudioSelectTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AudioSelectTableMouseClicked(evt);
            }
        });
        UploadAudioScrollPanel.setViewportView(AudioSelectTable);

        AudioSelectPanel.add(UploadAudioScrollPanel);
        UploadAudioScrollPanel.setBounds(20, 20, 400, 310);

        btnUploadSelectedList.setForeground(new java.awt.Color(255, 255, 255));
        btnUploadSelectedList.setText("Upload");
        btnUploadSelectedList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnUploadSelectedList.setContentAreaFilled(false);
        btnUploadSelectedList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnUploadSelectedListMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnUploadSelectedListMouseReleased(evt);
            }
        });
        btnUploadSelectedList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadSelectedListActionPerformed(evt);
            }
        });
        AudioSelectPanel.add(btnUploadSelectedList);
        btnUploadSelectedList.setBounds(440, 280, 80, 17);

        btnSelectAll.setForeground(new java.awt.Color(255, 255, 255));
        btnSelectAll.setText("Select All");
        btnSelectAll.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnSelectAll.setContentAreaFilled(false);
        btnSelectAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnSelectAllMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnSelectAllMouseReleased(evt);
            }
        });
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });
        AudioSelectPanel.add(btnSelectAll);
        btnSelectAll.setBounds(20, 335, 100, 17);

        btnUnSelectAll.setForeground(new java.awt.Color(255, 255, 255));
        btnUnSelectAll.setText("Un-Select All");
        btnUnSelectAll.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnUnSelectAll.setContentAreaFilled(false);
        btnUnSelectAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnUnSelectAllMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btnUnSelectAllMouseReleased(evt);
            }
        });
        btnUnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnSelectAllActionPerformed(evt);
            }
        });
        AudioSelectPanel.add(btnUnSelectAll);
        btnUnSelectAll.setBounds(130, 335, 100, 17);

        btnFormClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/defaultSkins/close.png"))); // NOI18N
        btnFormClose.setBorderPainted(false);
        btnFormClose.setContentAreaFilled(false);
        btnFormClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFormCloseActionPerformed(evt);
            }
        });
        AudioSelectPanel.add(btnFormClose);
        btnFormClose.setBounds(550, 10, 25, 25);

        publicRadio.setOpaque(false);
        AudioSelectPanel.add(publicRadio);
        publicRadio.setBounds(490, 210, 20, 21);

        privateRadio.setOpaque(false);
        AudioSelectPanel.add(privateRadio);
        privateRadio.setBounds(490, 230, 21, 21);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Set permission as");
        AudioSelectPanel.add(jLabel1);
        jLabel1.setBounds(440, 195, 120, 14);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Public");
        AudioSelectPanel.add(jLabel2);
        jLabel2.setBounds(440, 215, 50, 14);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Private");
        AudioSelectPanel.add(jLabel3);
        jLabel3.setBounds(440, 235, 50, 14);

        uploadConMsg.setForeground(new java.awt.Color(255, 255, 255));
        uploadConMsg.setText("-");
        AudioSelectPanel.add(uploadConMsg);
        uploadConMsg.setBounds(20, 360, 550, 14);

        MainContentPanel.add(AudioSelectPanel);
        AudioSelectPanel.setBounds(0, 0, 590, 390);

        MainBackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/defaultSkins/uploadingBg.png"))); // NOI18N
        MainBackGround.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MainBackGroundMousePressed(evt);
            }
        });
        MainBackGround.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MainBackGroundMouseDragged(evt);
            }
        });
        MainContentPanel.add(MainBackGround);
        MainBackGround.setBounds(0, 0, 590, 390);

        MainPanel.add(MainContentPanel);
        MainContentPanel.setBounds(5, 5, 590, 390);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-400)/2, 600, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        // TODO add your handling code here:
        for(int i = 0 ; i < this.AudioSelectTable.getRowCount() ; i++)
            SelectOption.setValueAt(true, i, 0);
    }//GEN-LAST:event_btnSelectAllActionPerformed

    private void MainBackGroundMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainBackGroundMousePressed
        // TODO add your handling code here:
        cursor = evt.getPoint();
    }//GEN-LAST:event_MainBackGroundMousePressed

    private void MainBackGroundMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MainBackGroundMouseDragged
        // TODO add your handling code here:
        this.setLocation(new Point(this.getX()+(int)(evt.getX()-cursor.getX()),this.getY()+(int)(evt.getY()-cursor.getY())));
    }//GEN-LAST:event_MainBackGroundMouseDragged

    private void btnUploadSelectedListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadSelectedListActionPerformed
        // TODO add your handling code here:
        if(publicRadio.isSelected() || privateRadio.isSelected()){
            LinkedList<Integer> tempNum = new LinkedList<Integer>();
            for(int i = 0 ; i < this.SelectOption.getRowCount() ; i++){
                if((Boolean)SelectOption.getValueAt(i, 0) == true){
                    tempNum.add(i);
                }
            }
            uploadConMsg.setText("");
            showUploadStatusPanel(tempNum);
        }else
            uploadConMsg.setText("Please select anyone permission options");
    }//GEN-LAST:event_btnUploadSelectedListActionPerformed

    private void btnUnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnSelectAllActionPerformed
        // TODO add your handling code here:
        for(int i = 0 ; i < this.AudioSelectTable.getRowCount() ; i++)
            SelectOption.setValueAt(false, i, 0);
    }//GEN-LAST:event_btnUnSelectAllActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        float value = 0.0f;
        uploadClosed   = true;
        
        while(value >= 0.0){
            try {Thread.sleep(20);} catch (Exception ex) {}
            //this.setOpacity(value);        //SE 1.7
            AWTUtilities.setWindowOpacity(this,value);  //SE 1.6u10
            value -= 0.1f;
        }
        //this.setOpacity(0.0f);    //SE 1.7
        AWTUtilities.setWindowOpacity(this,0.0f);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnFormCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFormCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnFormCloseActionPerformed

    private void AudioSelectTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AudioSelectTableMouseClicked
        // TODO add your handling code here:
        String path = (String)SelectOption.getValueAt(this.AudioSelectTable.rowAtPoint(evt.getPoint()), 4);
        
        AudioTAG songDetails = null;
        try { songDetails = new AudioTAG(path);} catch (Exception ex) {};
        
        Image cover = songDetails.getTagCover();
        
        if(cover != null){
            cover = cover.getScaledInstance(128,128, Image.SCALE_SMOOTH);
            ImageIcon coverIcon = new ImageIcon(cover);
            Cover.setIcon(coverIcon);
        }else
            Cover.setIcon(detailsCover);
    }//GEN-LAST:event_AudioSelectTableMouseClicked

    private void btnSelectAllMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectAllMousePressed
        // TODO add your handling code here:
        btnSelectAll.setForeground(Color.GRAY);
    }//GEN-LAST:event_btnSelectAllMousePressed

    private void btnSelectAllMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectAllMouseReleased
        // TODO add your handling code here:
        btnSelectAll.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnSelectAllMouseReleased

    private void btnUnSelectAllMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUnSelectAllMousePressed
        // TODO add your handling code here:
        btnUnSelectAll.setForeground(Color.GRAY);
    }//GEN-LAST:event_btnUnSelectAllMousePressed

    private void btnUnSelectAllMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUnSelectAllMouseReleased
        // TODO add your handling code here:
        btnUnSelectAll.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnUnSelectAllMouseReleased

    private void btnUploadSelectedListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUploadSelectedListMousePressed
        // TODO add your handling code here:
        btnUploadSelectedList.setForeground(Color.GRAY);
    }//GEN-LAST:event_btnUploadSelectedListMousePressed

    private void btnUploadSelectedListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUploadSelectedListMouseReleased
        // TODO add your handling code here:
        btnUploadSelectedList.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnUploadSelectedListMouseReleased

    private void showUploadStatusPanel(final LinkedList<Integer> tempTableNum){
        this.MainContentPanel.setVisible(false);
        this.AudioUploadPanel.setVisible(true);
        
        
        this.setBounds(0, 0, 320, 50);
        
        float value = 0.0f;
        while(value < 0.9){
            try {Thread.sleep(20);} catch (Exception ex) {}
            //this.setOpacity(value);        //SE 1.7
            AWTUtilities.setWindowOpacity(this,value);  //SE 1.6u10
            value += 0.1f;
        }
        try{Thread.sleep(2000);}catch(Exception e){e.printStackTrace();}
        
        new Thread(new Runnable(){public void run(){
            while(true){
                try {Thread.sleep(100);}catch(Exception e){}
                UploadProcessText.setText("Uploading... "+SelectOption.getValueAt(tempTableNum.get(processNum), 1));
                ProcessStatus.setText((processNum+1)+" of "+tempTableNum.size());
                UploadProcessBar.setValue(connection.uploadProcess);
            }
        }}).start();
        
        new Thread(new Runnable(){public void run(){
            try{
                if(!connection.isMediaConnected())connection.ConnectMedia(connection.ReceiveMediaServer(), connection.receiveUserID());
            }catch(Exception e){}
            
            for(int i = 0 ; i < tempTableNum.size() ; i++){
                if(uploadClosed)break;
                processNum = i;
                boolean isPublic = publicRadio.isSelected();
                
                int Error = connection.uploadToMedia((String)SelectOption.getValueAt(tempTableNum.get(processNum), 4),isPublic);
                if(Error == -1)System.err.println("Error on upload file - "+SelectOption.getValueAt(tempTableNum.get(processNum), 1));
                else if(Error == -2){
                    try{
                        connection.DisconnectMedia();
                        connection.ConnectMedia(connection.ReceiveMediaServer(), connection.receiveUserID());


                        if(connection.uploadToMedia((String)SelectOption.getValueAt(tempTableNum.get(processNum), 4),isPublic) == -1){
                            System.err.println("Error on upload file - "+SelectOption.getValueAt(tempTableNum.get(processNum), 1));
                        }
                    }catch(Exception ex){
                        ex.printStackTrace();
                    }
                }

            }
            btnCloseActionPerformed(null);
        }}).start();
    }
    
    
    private static class UploadingProgressBarUI extends BasicProgressBarUI {

        private Rectangle r = new Rectangle();

        @Override
        protected void paintIndeterminate(Graphics g, JComponent c) {
            Graphics2D g2d = (Graphics2D) g;
            g2d.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
            r = getBox(r);
            g.setColor(progressBar.getForeground());
            g.fillOval(r.x, r.y, r.width, r.height);
        }
    }


    private static class AudioSelectModel extends DefaultTableModel{

        Object[][] row = {};

        Object[] col = {"","Title","Artist","Album","Path"};

        public AudioSelectModel (){

            //Adding columns
            for(Object c: col)
                this.addColumn(c);

            //Adding rows
            for(Object[] r: row)
                addRow(r);

        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            if(columnIndex == 0)return getValueAt(0, columnIndex).getClass();

            else return super.getColumnClass(columnIndex);

        }

        public boolean isCellEditable(int row, int col){
            if(col == 0)return true;
            return false;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AudioSelectPanel;
    private javax.swing.JTable AudioSelectTable;
    private javax.swing.JPanel AudioUploadPanel;
    private javax.swing.JLabel Cover;
    private javax.swing.JLabel MainBackGround;
    private javax.swing.JPanel MainContentPanel;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JLabel ProcessStatus;
    private javax.swing.JScrollPane UploadAudioScrollPanel;
    private javax.swing.JLabel UploadPanelBg;
    private javax.swing.JProgressBar UploadProcessBar;
    private javax.swing.JLabel UploadProcessText;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnFormClose;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JButton btnUnSelectAll;
    private javax.swing.JButton btnUploadSelectedList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton privateRadio;
    private javax.swing.JRadioButton publicRadio;
    private javax.swing.JLabel uploadConMsg;
    // End of variables declaration//GEN-END:variables
}


